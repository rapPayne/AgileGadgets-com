import { f as createComponent, l as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_BAVukojE.mjs';
import 'kleur/colors';
import { $ as $$BlogPost } from './BlogPost_CwVIbcKS.mjs';

const html = () => "<p>Iâ€™m embarrassed for you, <a href=\"https://jestjs.io\" target=\"_blank\" rel=\"noopener noreferrer\">Jest</a>. Youâ€™re a fantastic testing framework, but youâ€™ve been achingly slow to embrace <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\" target=\"_blank\" rel=\"noopener noreferrer\">ES modules</a>. Itâ€™s 2025 and everyone else has moved on to modern JavaScript syntax. Youâ€™re still using CommonJS. You know - <code>require</code> and <code>module.exports</code>. Devs are laughing at you behind your back.</p>\n<p>If you fellow devs want to use ES modules in Jest, here are the secrets to getting Jest to work with ES modules.</p>\n<h2 id=\"es-modules-in-jest\">ES Modules in Jest</h2>\n<p>Letâ€™s say you have this function to test:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// sum.js</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> const</span><span style=\"color:#B392F0\"> sum</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">a</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">b</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> a </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> b;</span></span></code></pre>\n<p>So you write a test like this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// sum.test.js</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { sum } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"./sum.js\"</span><span style=\"color:#E1E4E8\">;  </span><span style=\"color:#6A737D\">// &#x3C;-- this is the problem</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">test</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"adds numbers\"</span><span style=\"color:#E1E4E8\">, () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  expect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">sum</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">)).</span><span style=\"color:#B392F0\">toBe</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">5</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span></code></pre>\n<p>Jest will throw errors like:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>SyntaxError: Cannot use import statement outside a module</span></span></code></pre>\n<p>or</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>TypeError: Jest encountered an unexpected token</span></span></code></pre>\n<p>The solution is to run Jest with ES modules enabled. But you can only do that by explicitly running node with the <code>--experimental-vm-modules</code> flag. So in package.json, you need to add a script like this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#FDAEB7;font-style:italic\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"scripts\"</span><span style=\"color:#E1E4E8\">: {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    \"test\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"node --experimental-vm-modules ./node_modules/.bin/jest\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#FDAEB7;font-style:italic\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Test that on your Mac/Linux machine and itâ€™ll work perfectly.</p>\n<h2 id=\"if-the-solution-breaks-in-windows\">If the solution breaks in Windows ðŸ’©</h2>\n<p>Run this on Windows and you may see this error:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>basedir=$(dirname \"$(echo \"$0\" | sed -e 's,\\\\,/,g')\")</span></span>\n<span class=\"line\"><span>          ^^^^^^^</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>SyntaxError: missing ) after argument list</span></span></code></pre>\n<p>If you see this, itâ€™s because <code>node_modules/.bin/jest</code> is a Unix shell script. Windows doesnâ€™t understand bash scripts.</p>\n<h2 id=\"the-quick-fix\">The Quick Fix</h2>\n<p>You can make it work by using <code>npx</code>. Run this in a terminal window:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\"><code><span class=\"line\"><span style=\"color:#B392F0\"> npx</span><span style=\"color:#79B8FF\"> --node-options=</span><span style=\"color:#9ECBFF\">\"--experimental-vm-modules\"</span><span style=\"color:#9ECBFF\"> jest</span></span></code></pre>\n<p>But this is a <a href=\"https://en.wikipedia.org/wiki/Kludge\" target=\"_blank\" rel=\"noopener noreferrer\">kludge</a>.</p>\n<h2 id=\"the-proper-fix\">The proper fix</h2>\n<p>The robust fix is to update your <code>package.json</code> to use this script:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#FDAEB7;font-style:italic\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"scripts\"</span><span style=\"color:#E1E4E8\">: {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    \"test\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"node --experimental-vm-modules ./node_modules/jest/bin/jest\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color:#FDAEB7;font-style:italic\">  ...</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>All weâ€™ve done here is tell the system to run the actual Jest as opposed to a Unix shell script that Windows canâ€™t understand.</p>\n<p>This totally works on both Windows and Unix systems. Youâ€™re welcome. ðŸ™‚</p>\n<p>Now, Jest, weâ€™re putting you on blast: youâ€™ve got to do better!</p>";

				const frontmatter = {"layout":"../../layouts/BlogPost.astro","title":"The secret to getting Jest to work with ES Modules","description":"How to enable to use ES modules in a way that works on Windows, Mac, and Linux. The well-known problem is solved in a quick-and-dirty way and a graceful way.","pubDate":"2025-07-02T00:00:00.000Z","author":"Rap Payne","time-to-read":"3 minutes","url":"/blog/jest-using-modules","cloudinaryImageFileName":"v1751499858/jest-using-modules_csthfk.png","categories":["javascript"]};
				const file = "/Users/rap/Desktop/agile-gadgets/src/pages/blog/jest-using-modules.md";
				const url = "/blog/jest-using-modules";
				function rawContent() {
					return "   \n                                    \n                                                           \n                                                                                                                                                                            \n                   \n                 \n                       \n                             \n                                                                  \n                          \n   \n\n\nI'm embarrassed for you, <a href=\"https://jestjs.io\" target=\"_blank\" rel=\"noopener noreferrer\">Jest</a>. You're a fantastic testing framework, but you've been achingly slow to embrace <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\" target=\"_blank\" rel=\"noopener noreferrer\">ES modules</a>. It's 2025 and everyone else has moved on to modern JavaScript syntax. Youâ€™re still using CommonJS. You know - `require` and `module.exports`. Devs are laughing at you behind your back.\n\nIf you fellow devs want to use ES modules in Jest, here are the secrets to getting Jest to work with ES modules.\n\n## ES Modules in Jest\n\nLet's say you have this function to test:\n\n```js\n// sum.js\nexport const sum = (a, b) => a + b;\n```\nSo you write a test like this:\n\n```js\n// sum.test.js\nimport { sum } from \"./sum.js\";  // <-- this is the problem\n\ntest(\"adds numbers\", () => {\n  expect(sum(2, 3)).toBe(5);\n});\n```\nJest will throw errors like:\n```\nSyntaxError: Cannot use import statement outside a module\n```\nor\n\n```\nTypeError: Jest encountered an unexpected token\n```\n\nThe solution is to run Jest with ES modules enabled. But you can only do that by explicitly running node with the `--experimental-vm-modules` flag. So in package.json, you need to add a script like this:\n\n```json\n{\n  ...\n  \"scripts\": {\n    \"test\": \"node --experimental-vm-modules ./node_modules/.bin/jest\"\n  }\n  ...\n}\n```\nTest that on your Mac/Linux machine and it'll work perfectly.\n\n## If the solution breaks in Windows ðŸ’©\nRun this on Windows and you may see this error:\n```\nbasedir=$(dirname \"$(echo \"$0\" | sed -e 's,\\\\,/,g')\")\n          ^^^^^^^\n\nSyntaxError: missing ) after argument list\n```\nIf you see this, it's because `node_modules/.bin/jest` is a Unix shell script. Windows doesn't understand bash scripts.\n\n## The Quick Fix\nYou can make it work by using `npx`. Run this in a terminal window:\n\n```sh\n npx --node-options=\"--experimental-vm-modules\" jest\n```\nBut this is a <a href=\"https://en.wikipedia.org/wiki/Kludge\" target=\"_blank\" rel=\"noopener noreferrer\">kludge</a>.\n\n## The proper fix\nThe robust fix is to update your `package.json` to use this script:\n```json\n{\n  ...\n  \"scripts\": {\n    \"test\": \"node --experimental-vm-modules ./node_modules/jest/bin/jest\"\n  },\n  ...\n}\n```\nAll we've done here is tell the system to run the actual Jest as opposed to a Unix shell script that Windows can't understand.\n\nThis totally works on both Windows and Unix systems. You're welcome. ðŸ™‚\n\nNow, Jest, we're putting you on blast: you've got to do better!";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":2,"slug":"es-modules-in-jest","text":"ES Modules in Jest"},{"depth":2,"slug":"if-the-solution-breaks-in-windows","text":"If the solution breaks in Windows ðŸ’©"},{"depth":2,"slug":"the-quick-fix","text":"The Quick Fix"},{"depth":2,"slug":"the-proper-fix","text":"The proper fix"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogPost, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
