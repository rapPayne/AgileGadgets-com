import { f as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_Bizk4uOg.mjs';
import 'kleur/colors';
import { $ as $$BlogPost } from './BlogPost_49v0wKvE.mjs';

const html = () => "<p>So you want to write and host an API that uses a pretrained machine learning model? Maybe your client needs to be alerted when a user enters a scary comment on their website. Is the customer angry? Impatient? Happy? Within a few minutes, you can add this capability to your site. Here’s how.</p>\n<p>There are a few <a href=\"#prerequisites\">prerequisites</a>.</p>\n<h2 id=\"step-1-pick-out-a-hugging-face-model\">Step 1: Pick out a Hugging Face model</h2>\n<p>Hugging Face has tons of pretrained models. You just need to pick one that fits your needs.</p>\n<ol>\n<li>Go to <a href=\"https://huggingface.co/models\">Hugging Face</a>.\nOn the left there are over 50 categories of models. You’ll see categories like:</li>\n</ol>\n<ul>\n<li>Text Classification</li>\n<li>Text Generation</li>\n<li>Image Classification</li>\n<li>Object Detection</li>\n<li>Speech Recognition</li>\n<li>and more…</li>\n</ul>\n<ol start=\"2\">\n<li>Click on a category.</li>\n</ol>\n<p>For this tutorial, we’re trying to get our React app to detect the mood of the user. That’s a text classification problem. So we’ll look under the <strong>Natural Language Processing</strong> section and choose <strong>Text Classification</strong>.</p>\n<ol>\n<li>Scroll back up to the top and click on <strong>Other</strong>. Then choose <strong>Select all</strong> under <strong>Inference Provicers</strong>.</li>\n</ol>\n<p>You now see a list of models that will solve your real-world problem and can be accessed via an API.</p>\n<p><img src=\"https://res.cloudinary.com/rappayne/image/upload/v1747235468/hf_models_search_i2kmki.png\" alt=\"Filtering models by inference provider and category\"></p>\n<p>Cool, right? 🥳 Browse through and click on any model you want.</p>\n<p>I’m going to use <a href=\"https://huggingface.co/SamLowe/roberta-base-go_emotions\">SamLowe/roberta-base-go_emotions</a> for this demo.</p>\n<h2 id=\"step-2-learn-to-use-the-model\">Step 2: Learn to use the model</h2>\n<p>As you clicked on the model, you see its details which include a button that says <strong>Deploy</strong>. Click it and choose <strong>Inference Providers</strong>.</p>\n<p><img src=\"https://res.cloudinary.com/rappayne/image/upload/v1747235159/hf_models_all5bp.png\" alt=\"Inference Providers are found under the deploy button\"></p>\n<p>In the modal window, you’ll see how-to code snippets in a number of languages. Choose JavaScript and click that lovely <strong>Copy</strong> button.</p>\n<p>The model I chose says to use it like this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> function</span><span style=\"color:#B392F0\"> query</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">data</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> response</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> fetch</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"https://router.huggingface.co/hf-inference/models/SamLowe/roberta-base-go_emotions\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    headers: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">     Authorization: </span><span style=\"color:#9ECBFF\">\"Bearer hf_xxxxxxxxxxxxxxxxxxxxxxxx\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">     \"Content-Type\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"application/json\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    method: </span><span style=\"color:#9ECBFF\">\"POST\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    body: </span><span style=\"color:#79B8FF\">JSON</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">stringify</span><span style=\"color:#E1E4E8\">(data),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  });</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> result</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> response.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> result;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">query</span><span style=\"color:#E1E4E8\">({ inputs: </span><span style=\"color:#9ECBFF\">\"I like you. I love you\"</span><span style=\"color:#E1E4E8\"> }).</span><span style=\"color:#B392F0\">then</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">response</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">JSON</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">stringify</span><span style=\"color:#E1E4E8\">(response));</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span></code></pre>\n<p>Do you see that Authorization header? That’s your Hugging Face API key. You’ll  use <a href=\"https://agilegadgets.com/blog/hugging-face-api-keys-made-easy\">your own key</a>.</p>\n<h2 id=\"step-3-make-your-react-app-consume-the-web-api\">Step 3: Make your React app consume the web API</h2>\n<ol>\n<li>Edit your React website. Here’s a simple SentimentAnalysis.jsx that reads a text box.</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { useActionState } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> 'react'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> const</span><span style=\"color:#B392F0\"> SentimentAnalysis</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#B392F0\"> fetchMoodOnFormSubmit</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> async</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">prevState</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">formData</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    const</span><span style=\"color:#79B8FF\"> message</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> formData.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'message'</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    const</span><span style=\"color:#79B8FF\"> mood</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"TBD\"</span><span style=\"color:#E1E4E8\">;  </span><span style=\"color:#6A737D\">// &#x3C;-- WILL BE FETCHED FROM HUGGING FACE SOON</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> { message, mood };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">state</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">dispatchFunction</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">isPending</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> useActionState</span><span style=\"color:#E1E4E8\">(fetchMoodOnFormSubmit, </span><span style=\"color:#79B8FF\">undefined</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      &#x3C;</span><span style=\"color:#85E89D\">form</span><span style=\"color:#B392F0\"> action</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{dispatchFunction}></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">label</span><span style=\"color:#E1E4E8\">>Your comments:&#x3C;</span><span style=\"color:#85E89D\">textarea</span><span style=\"color:#B392F0\"> name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"message\"</span><span style=\"color:#B392F0\"> required</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">textarea</span><span style=\"color:#E1E4E8\">>&#x3C;/</span><span style=\"color:#85E89D\">label</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">button</span><span style=\"color:#B392F0\"> type</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"submit\"</span><span style=\"color:#B392F0\"> disabled</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{isPending}></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">          {isPending </span><span style=\"color:#F97583\">?</span><span style=\"color:#9ECBFF\"> 'Analyzing...'</span><span style=\"color:#F97583\"> :</span><span style=\"color:#9ECBFF\"> 'Submit'</span><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        &#x3C;/</span><span style=\"color:#85E89D\">button</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      &#x3C;/</span><span style=\"color:#85E89D\">form</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      &#x3C;</span><span style=\"color:#85E89D\">h3</span><span style=\"color:#E1E4E8\">>Mood is: {state </span><span style=\"color:#F97583\">?</span><span style=\"color:#E1E4E8\"> state.mood </span><span style=\"color:#F97583\">:</span><span style=\"color:#9ECBFF\"> 'No response yet'</span><span style=\"color:#E1E4E8\">}&#x3C;/</span><span style=\"color:#85E89D\">h3</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;/</span><span style=\"color:#85E89D\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span></code></pre>\n<p>Feel free to test this out. When you click the button, it will put a hardcoded “TBD” in the mood label. We want that to be the result of the Hugging Face model. Let’s do that now.</p>\n<ol start=\"2\">\n<li>Pretty simple; React code + Hugging Face sample code = the working app. In other words, take the two code snippets from above and combine them.</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> fetchMoodOnFormSubmit</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> async</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">prevState</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">formData</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> message</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> formData.</span><span style=\"color:#B392F0\">get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'message'</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> data</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> { inputs: message };</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> response</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> fetch</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"https://router.huggingface.co/hf-inference/models/SamLowe/roberta-base-go_emotions\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      headers: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        Authorization: </span><span style=\"color:#9ECBFF\">\"Bearer hf_YOUR_HUGGING_FACE_API_KEY\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        \"Content-Type\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"application/json\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      method: </span><span style=\"color:#9ECBFF\">\"POST\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      body: </span><span style=\"color:#79B8FF\">JSON</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">stringify</span><span style=\"color:#E1E4E8\">(data),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    });</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> result</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> response.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> mood</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> result[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">][</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">].label; </span><span style=\"color:#6A737D\">// &#x3C;-- THIS IS THE MAIN MOOD</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> { message, mood };</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Note that I had to wrap the input in a data object. The model I chose expects the input to be in a specific format. I also had to unwrap the result a bit. The model I chose returns a list of lists of objects. The outer list is the first sentence, the inner list is the labels, and the object is the label and confidence score. So I just took the first label.</p>\n<p>So just some massaging of the data boundaries and we have a working app. I expect this will be your experience too.</p>\n<h2 id=\"step-4-test-it-out\">Step 4: Test it out</h2>\n<ol>\n<li>Run your React app and enter a comment in the text box. Click the button and wait for the result. You should see the mood of the comment in the label below the button.</li>\n</ol>\n<p>I grabbed a random product review from Amazon and pasted it in the text box. Obviously the buyer was not happy.</p>\n<p><img src=\"https://res.cloudinary.com/rappayne/image/upload/v1747235189/react_hf_inference_demo_qamy6p.png\" alt=\"Mood says &#x22;annoyance&#x22; after a poor product review\"></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Congratulations! 🥳 You’ve successfully integrated a Hugging Face model into your React application.</p>\n<p>Using these steps with different models and different React components, you can easily add AI capabilities to your web app.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>This quick-and-dirty tutorial assumes you have …</p>\n<ul>\n<li>An existing React web app to integrate with.</li>\n<li>A Hugging Face access tokey. <a href=\"https://agilegadgets.com/blog/hugging-face-api-keys-made-easy\">Here’s how</a>.</li>\n</ul>";

				const frontmatter = {"layout":"../../layouts/BlogPost.astro","title":"React with AI: Quickly Add an LLM in a React App","description":"How your React app can consume an AI/ML model via the Hugging Face Inference API. We make it quick and easy.","pubDate":"2025-05-19T00:00:00.000Z","author":"Rap Payne","time-to-read":"10 minutes","url":"/blog/react-hugging-face-inference-api","cloudinaryImageFileName":"v1747064832/hf_react_logos_vpsumv.png","categories":["react","machine learning","data science","API","tutorial","hugging face"]};
				const file = "/Users/rap/Desktop/agile-gadgets/src/pages/blog/react-hugging-face-inference-api.md";
				const url = "/blog/react-hugging-face-inference-api";
				function rawContent() {
					return "   \n                                    \n                                                         \n                                                                                                                           \n                   \n                 \n                        \n                                           \n                                                              \n                                                                                            \n   \n\nSo you want to write and host an API that uses a pretrained machine learning model? Maybe your client needs to be alerted when a user enters a scary comment on their website. Is the customer angry? Impatient? Happy? Within a few minutes, you can add this capability to your site. Here's how.\n\nThere are a few [prerequisites](#prerequisites).\n\n## Step 1: Pick out a Hugging Face model\n\nHugging Face has tons of pretrained models. You just need to pick one that fits your needs. \n\n1. Go to [Hugging Face](https://huggingface.co/models).\nOn the left there are over 50 categories of models. You'll see categories like:\n  - Text Classification\n  - Text Generation\n  - Image Classification\n  - Object Detection\n  - Speech Recognition\n  - and more...\n\n2. Click on a category. \n\nFor this tutorial, we're trying to get our React app to detect the mood of the user. That's a text classification problem. So we'll look under the **Natural Language Processing** section and choose **Text Classification**.\n\n1. Scroll back up to the top and click on **Other**. Then choose **Select all** under **Inference Provicers**.\n\nYou now see a list of models that will solve your real-world problem and can be accessed via an API.\n\n![Filtering models by inference provider and category](https://res.cloudinary.com/rappayne/image/upload/v1747235468/hf_models_search_i2kmki.png)\n\nCool, right? 🥳 Browse through and click on any model you want. \n\nI'm going to use [SamLowe/roberta-base-go_emotions](https://huggingface.co/SamLowe/roberta-base-go_emotions) for this demo.\n\n\n## Step 2: Learn to use the model\nAs you clicked on the model, you see its details which include a button that says **Deploy**. Click it and choose **Inference Providers**. \n\n![Inference Providers are found under the deploy button](https://res.cloudinary.com/rappayne/image/upload/v1747235159/hf_models_all5bp.png)\n\nIn the modal window, you'll see how-to code snippets in a number of languages. Choose JavaScript and click that lovely **Copy** button.\n\nThe model I chose says to use it like this:\n```javascript\nasync function query(data) {\n  const response = await fetch(\n  \"https://router.huggingface.co/hf-inference/models/SamLowe/roberta-base-go_emotions\",\n  {\n    headers: {\n     Authorization: \"Bearer hf_xxxxxxxxxxxxxxxxxxxxxxxx\",\n     \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n    body: JSON.stringify(data),\n  });\n  const result = await response.json();\n  return result;\n}\n\nquery({ inputs: \"I like you. I love you\" }).then((response) => {\n    console.log(JSON.stringify(response));\n});\n```\n\nDo you see that Authorization header? That's your Hugging Face API key. You'll  use [your own key](https://agilegadgets.com/blog/hugging-face-api-keys-made-easy). \n\n## Step 3: Make your React app consume the web API \n1. Edit your React website. Here's a simple SentimentAnalysis.jsx that reads a text box.\n\n```javascript\nimport { useActionState } from 'react';\n\nexport const SentimentAnalysis = () => {\n  const fetchMoodOnFormSubmit = async (prevState, formData) => {\n    const message = formData.get('message');\n    const mood = \"TBD\";  // <-- WILL BE FETCHED FROM HUGGING FACE SOON\n    return { message, mood };\n  }\n\n  const [state, dispatchFunction, isPending] = useActionState(fetchMoodOnFormSubmit, undefined)\n\n  return (\n    <div>\n      <form action={dispatchFunction}>\n        <label>Your comments:<textarea name=\"message\" required></textarea></label>\n        <button type=\"submit\" disabled={isPending}>\n          {isPending ? 'Analyzing...' : 'Submit'}\n        </button>\n      </form>\n      <h3>Mood is: {state ? state.mood : 'No response yet'}</h3>\n    </div>\n  );\n};\n```\n\nFeel free to test this out. When you click the button, it will put a hardcoded \"TBD\" in the mood label. We want that to be the result of the Hugging Face model. Let's do that now.\n\n2. Pretty simple; React code + Hugging Face sample code = the working app. In other words, take the two code snippets from above and combine them.\n\n```javascript\nconst fetchMoodOnFormSubmit = async (prevState, formData) => {\n  const message = formData.get('message');\n  const data = { inputs: message };\n  const response = await fetch(\n    \"https://router.huggingface.co/hf-inference/models/SamLowe/roberta-base-go_emotions\",\n    {\n      headers: {\n        Authorization: \"Bearer hf_YOUR_HUGGING_FACE_API_KEY\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n      body: JSON.stringify(data),\n    });\n  const result = await response.json();\n  const mood = result[0][0].label; // <-- THIS IS THE MAIN MOOD\n  return { message, mood };\n}\n```\nNote that I had to wrap the input in a data object. The model I chose expects the input to be in a specific format. I also had to unwrap the result a bit. The model I chose returns a list of lists of objects. The outer list is the first sentence, the inner list is the labels, and the object is the label and confidence score. So I just took the first label.\n\nSo just some massaging of the data boundaries and we have a working app. I expect this will be your experience too.\n\n## Step 4: Test it out\n1. Run your React app and enter a comment in the text box. Click the button and wait for the result. You should see the mood of the comment in the label below the button.\n\nI grabbed a random product review from Amazon and pasted it in the text box. Obviously the buyer was not happy. \n\n![Mood says \"annoyance\" after a poor product review](https://res.cloudinary.com/rappayne/image/upload/v1747235189/react_hf_inference_demo_qamy6p.png)\n\n## Conclusion\n\nCongratulations! 🥳 You've successfully integrated a Hugging Face model into your React application.\n\nUsing these steps with different models and different React components, you can easily add AI capabilities to your web app. \n\n\n## Prerequisites\n\nThis quick-and-dirty tutorial assumes you have ...\n\n- An existing React web app to integrate with.\n- A Hugging Face access tokey. [Here's how](https://agilegadgets.com/blog/hugging-face-api-keys-made-easy).\n\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":2,"slug":"step-1-pick-out-a-hugging-face-model","text":"Step 1: Pick out a Hugging Face model"},{"depth":2,"slug":"step-2-learn-to-use-the-model","text":"Step 2: Learn to use the model"},{"depth":2,"slug":"step-3-make-your-react-app-consume-the-web-api","text":"Step 3: Make your React app consume the web API"},{"depth":2,"slug":"step-4-test-it-out","text":"Step 4: Test it out"},{"depth":2,"slug":"conclusion","text":"Conclusion"},{"depth":2,"slug":"prerequisites","text":"Prerequisites"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogPost, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
