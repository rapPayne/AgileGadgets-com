import { f as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_Bizk4uOg.mjs';
import 'kleur/colors';
import { $ as $$BlogPost } from './BlogPost_BCkD1Q45.mjs';

const html = () => "<p>So you want to write and host an API that uses a pretrained machine learning model? Maybe your client needs to be alerted when a user enters a scary comment on their website. Is the customer angry? Impatient? Happy? Within a few minutes, you can add this capability to their site. Here’s how.</p>\n<p>There are a few <a href=\"#prerequisites\">prerequisites</a>.</p>\n<h2 id=\"step-1-create-a-new-space\">Step 1: Create a New Space</h2>\n<p>Hugging Face will host a web app that runs any pretrained ML model. You decide the model and interface. They call these “Spaces”. That’s nice and all but our goal is to create an API. We’ll use the web app to host our model and expose it via HTTP. One of their options, “Gradio”, allows that.</p>\n<ol>\n<li>Log in to your <a href=\"https://huggingface.co/\">Hugging Face</a> account.</li>\n<li>Navigate to <a href=\"https://huggingface.co/spaces\">Spaces</a>.</li>\n<li>Click the ”<strong>+ New Space</strong>” button.</li>\n<li><strong>Space Name</strong>: A unique name for your Space like <code>yourSpaceName</code>.</li>\n<li><strong>Space SDK</strong>: Select <code>Gradio</code>, then <code>blank</code>.\nRAP: IMAGE HERE</li>\n<li><strong>Visibility</strong>: Set it to <code>Public</code> or <code>Private</code> as needed.</li>\n<li>Click the “<strong>Create Space</strong>” button.</li>\n<li>When it’s finished building, close the log window.</li>\n</ol>\n<h2 id=\"step-2-sync-your-files-with-your-local-machine-using-git\">Step 2: Sync your files with your local machine using git</h2>\n<p>Editing the code is best done locally. We’ll use git to sync our files with your Hugging Face repository.</p>\n<ol>\n<li>Get a security token from your Hugging Face account:</li>\n</ol>\n<ul>\n<li>Go to your <a href=\"https://huggingface.co/settings/tokens\">settings</a>.</li>\n<li>Click on “<strong>New token</strong>”.</li>\n<li>Token type: <code>Write</code>.</li>\n<li>Token name: <code>spaces</code>.</li>\n<li>Click “<strong>Create token</strong>”.</li>\n<li>Copy the token and save it somewhere safe. You won’t be able to see it again.</li>\n</ul>\n<ol start=\"2\">\n<li>Clone your new Spaces repository locally:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#9ECBFF\"> https://huggingface.co/spaces/</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#9ECBFF\">yourUsernam</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#F97583\">></span><span style=\"color:#9ECBFF\">/</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#9ECBFF\">yourSpaceNam</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#F97583\">></span></span></code></pre>\n<ol start=\"3\">\n<li>Open VS Code (or your favorite text editor) in the cloned directory:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">code</span><span style=\"color:#9ECBFF\"> yourSpaceName</span></span></code></pre>\n<p>You’ll see a few files:</p>\n<ul>\n<li><code>README.md</code>: Notes for yourself.</li>\n<li><code>app.py</code>: The main application file.</li>\n<li><code>requirements.txt</code>: A file to specify dependencies.</li>\n<li><code>.gitattributes</code>: Specifies how files are treated in the repository. You can ignore it.</li>\n</ul>\n<ol start=\"4\">\n<li>Apply your token</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> remote</span><span style=\"color:#9ECBFF\"> set-url</span><span style=\"color:#9ECBFF\"> origin</span><span style=\"color:#9ECBFF\"> https://</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#9ECBFF\">yourUserNam</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#F97583\">></span><span style=\"color:#9ECBFF\">:</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#9ECBFF\">yourToke</span><span style=\"color:#E1E4E8\">n</span><span style=\"color:#F97583\">></span><span style=\"color:#9ECBFF\">@huggingface.co/spaces/</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#9ECBFF\">yourUserNam</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#F97583\">></span><span style=\"color:#9ECBFF\">/</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#9ECBFF\">yourSpaceNam</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#F97583\">></span></span></code></pre>\n<ol start=\"5\">\n<li>Test it out by pushing a change:</li>\n</ol>\n<ul>\n<li>Edit <code>app.py</code></li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> gradio </span><span style=\"color:#F97583\">as</span><span style=\"color:#E1E4E8\"> gr</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> predict</span><span style=\"color:#E1E4E8\">(input):</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#F97583\"> f</span><span style=\"color:#9ECBFF\">\"predict successfully ran with </span><span style=\"color:#79B8FF\">{input}</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">demo </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> gr.Interface(</span><span style=\"color:#FFAB70\">fn</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">predict, </span><span style=\"color:#FFAB70\">inputs</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'text'</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">outputs</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">'label'</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">demo.launch()</span></span></code></pre>\n<ul>\n<li>Run the following commands in your terminal:\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> .</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> commit</span><span style=\"color:#79B8FF\"> -m</span><span style=\"color:#9ECBFF\"> \"Simple read and write ability\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> push</span></span></code></pre>\n</li>\n<li>Go back to your Hugging Face Space. Click <strong>Files</strong> and choose <code>app.py</code>. You should see your changes.</li>\n</ul>\n<ol start=\"6\">\n<li>Test it out at <code>https://huggingface.co/spaces/&#x3C;yourUsername>/&#x3C;yourSpaceName></code>. You should see a Gradio interface with a “Submit” button.\nIMAGE HERE, RAP</li>\n</ol>\n<p>Notice at the bottom, you’ll see a “Use via API” button. It has code to consume the API. I’ll give you that code in a minute.</p>\n<h2 id=\"step-3-get-the-web-api-working-via-http\">Step 3: Get the web API working via HTTP</h2>\n<ol>\n<li>In your regular React website, install the Gradio client:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">npm</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> @gradio/client</span></span></code></pre>\n<ol>\n<li>Edit your React component that has a textbox, button, and output label:\nRAP: SHOULDN’T WE BE READING AN INPUT FROM THE USER? MAYBE A TEXT BOX WITH A SUBMIT BUTTON?</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { Client } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"@gradio/client\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> response_0</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> fetch</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> exampleImage</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> response_0.</span><span style=\"color:#B392F0\">blob</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">\t\t\t\t\t\t</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> client</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> Client.</span><span style=\"color:#B392F0\">connect</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"YourUsername/YourSpaceName\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> result</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> client.</span><span style=\"color:#B392F0\">predict</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/predict\"</span><span style=\"color:#E1E4E8\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(result.data);</span></span></code></pre>\n<ol>\n<li>\n<p>Run your React app and test it out. You should see the result on the page.</p>\n</li>\n<li>\n<p>Bonus! Best practice says to pull this into a function in a separate file but hey, you do you.</p>\n</li>\n</ol>\n<h2 id=\"step-4-add-your-model-and-api-code\">Step 4: Add Your Model and API Code</h2>\n<p>This is the hard part. The code you write will depend on the model you choose but good news; the model creator will usually provide a sample code snippet.</p>\n<p>For this example, I’m using <a href=\"https://huggingface.co/SamLowe/roberta-base-go_emotions\">SamLowe/roberta-base-go_emotions</a>.</p>\n<ol>\n<li>Edit your <code>app.py</code> file. Clear out the existing code and replace it with code to load and run the model:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> transformers </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> pipeline</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">classifier </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> pipeline(</span><span style=\"color:#FFAB70\">task</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"text-classification\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">model</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"SamLowe/roberta-base-go_emotions\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">top_k</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">None</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">sentences </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">\"I am not having a great day\"</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">model_outputs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> classifier(sentences)</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">print</span><span style=\"color:#E1E4E8\">(model_outputs[</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">])</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># produces a list of dicts for each of the labels</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># [{'label': 'sadness', 'score': 0.9998}]</span></span></code></pre>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> fastapi </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> FastAPI, Request</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> pydantic </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> BaseModel</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> torch</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> transformers </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> AutoModelForSequenceClassification, AutoTokenizer</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">app </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> FastAPI()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\"># Load model and tokenizer</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">model_name </span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\"> \"distilbert-base-uncased-finetuned-sst-2-english\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">model_name </span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\"> \"SamLowe/roberta-base-go_emotions\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">model </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> AutoModelForSequenceClassification.from_pretrained(model_name)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">tokenizer </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> AutoTokenizer.from_pretrained(model_name)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#B392F0\"> InputData</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">BaseModel</span><span style=\"color:#E1E4E8\">):</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">   text: </span><span style=\"color:#79B8FF\">str</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">@app.post</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/predict\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> def</span><span style=\"color:#B392F0\"> predict</span><span style=\"color:#E1E4E8\">(data: InputData):</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">   inputs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> tokenizer(data.text, </span><span style=\"color:#FFAB70\">return_tensors</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"pt\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">   outputs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> model(</span><span style=\"color:#F97583\">**</span><span style=\"color:#E1E4E8\">inputs)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">   prediction </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> torch.argmax(outputs.logits, </span><span style=\"color:#FFAB70\">dim</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">).item()</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">   return</span><span style=\"color:#E1E4E8\"> {</span><span style=\"color:#9ECBFF\">\"label\"</span><span style=\"color:#E1E4E8\">: prediction}</span></span></code></pre>\n<ol start=\"3\">\n<li>Add any dependencies to the <code>requirements.txt</code> file:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>fastapi</span></span>\n<span class=\"line\"><span>uvicorn</span></span>\n<span class=\"line\"><span>torch</span></span>\n<span class=\"line\"><span>transformers</span></span></code></pre>\n<ol start=\"4\">\n<li>git add, commit and push your changes:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> add</span><span style=\"color:#9ECBFF\"> .</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> commit</span><span style=\"color:#79B8FF\"> -m</span><span style=\"color:#9ECBFF\"> \"Added model and API code\"</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> push</span></span></code></pre>\n<ol start=\"5\">\n<li>Test it out at <code>https://huggingface.co/spaces/&#x3C;yourUsername>/&#x3C;yourSpaceName></code>. You should see a Gradio interface with a “Submit” button.\nIMAGE HERE, RAP</li>\n<li>Test Your API. Use a tool like <code>curl</code> or Postman to test your API. For example:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#79B8FF\"> -X</span><span style=\"color:#9ECBFF\"> POST</span><span style=\"color:#9ECBFF\"> https://huggingface.co/spaces/</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#9ECBFF\">yourUsernam</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#F97583\">></span><span style=\"color:#9ECBFF\">/</span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#9ECBFF\">yourSpaceNam</span><span style=\"color:#E1E4E8\">e</span><span style=\"color:#F97583\">></span><span style=\"color:#9ECBFF\">/predict</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">-H </span><span style=\"color:#9ECBFF\">\"Content-Type: application/json\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">-d </span><span style=\"color:#9ECBFF\">'I love this!'</span></span></code></pre>\n<p>IMAGE HERE, RAP\n6. And finally, test it out in your React app. You should see the result on the page.\nIMAGE HERE, RAP</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Congratulations! You’ve successfully deployed a machine learning model on Hugging Face Spaces and exposed it via an HTTP API. This setup is ideal for sharing your models with others while maintaining control over access.</p>\n<p>For more advanced use cases, explore the Hugging Face documentation and experiment with additional features like custom domains and private Spaces.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>This quick-and-dirty tutorial assumes you have …</p>\n<ul>\n<li>An existing React web app to integrate with.</li>\n<li>A Hugging Face account. Sign up at <a href=\"https://huggingface.co/\">Hugging Face</a>.</li>\n<li>A trained machine learning model selected. Find one <a href=\"https://huggingface.co/models\">here</a>. In this tutorial, we used <a href=\"https://huggingface.co/SamLowe/roberta-base-go_emotions\">SamLowe/roberta-base-go_emotions</a>.</li>\n<li>git installed on your local machine.</li>\n<li>Basic knowledge of JavaScript, Python and HTTP APIs.</li>\n</ul>";

				const frontmatter = {"layout":"../../layouts/BlogPost.astro","title":"Quickly Use an AI LLM with a React App","description":"Your React app can use the Hugging Face Inference API to consume a machine learning model with .","pubDate":"2025-05-12T00:00:00.000Z","author":"Rap Payne","time-to-read":"5 minutes","url":"/blog/huggingface-spaces","cloudinaryImageFileName":"v1746633734/huggingface-spaces_i2hd4j.png","categories":["machine learning","data science","API","tutorial"]};
				const file = "/Users/rap/Desktop/agile-gadgets/src/pages/blog/hugging-face-spaces.md";
				const url = "/blog/hugging-face-spaces";
				function rawContent() {
					return "   \n                                    \n                                               \n                                                                                                               \n                   \n                 \n                       \n                             \n                                                                  \n                                                                   \n   \n\nSo you want to write and host an API that uses a pretrained machine learning model? Maybe your client needs to be alerted when a user enters a scary comment on their website. Is the customer angry? Impatient? Happy? Within a few minutes, you can add this capability to their site. Here's how.\n\nThere are a few [prerequisites](#prerequisites).\n\n## Step 1: Create a New Space\n\nHugging Face will host a web app that runs any pretrained ML model. You decide the model and interface. They call these \"Spaces\". That's nice and all but our goal is to create an API. We'll use the web app to host our model and expose it via HTTP. One of their options, \"Gradio\", allows that.\n\n1. Log in to your [Hugging Face](https://huggingface.co/) account.\n2. Navigate to [Spaces](https://huggingface.co/spaces).\n3. Click the \"**+ New Space**\" button.\n4. **Space Name**: A unique name for your Space like `yourSpaceName`.\n5. **Space SDK**: Select `Gradio`, then `blank`.\nRAP: IMAGE HERE\n6. **Visibility**: Set it to `Public` or `Private` as needed.\n7. Click the \"**Create Space**\" button.\n8. When it's finished building, close the log window.\n\n## Step 2: Sync your files with your local machine using git\nEditing the code is best done locally. We'll use git to sync our files with your Hugging Face repository.\n\n1. Get a security token from your Hugging Face account:\n  - Go to your [settings](https://huggingface.co/settings/tokens).\n  - Click on \"**New token**\".\n  - Token type: `Write`.\n  - Token name: `spaces`.\n  - Click \"**Create token**\".\n  - Copy the token and save it somewhere safe. You won't be able to see it again.\n\n2. Clone your new Spaces repository locally:\n  ```bash\n  git clone https://huggingface.co/spaces/<yourUsername>/<yourSpaceName>\n  ```\n\n3. Open VS Code (or your favorite text editor) in the cloned directory:\n  ```bash\ncode yourSpaceName\n  ```\n\nYou'll see a few files:\n  - `README.md`: Notes for yourself.\n  - `app.py`: The main application file.\n  - `requirements.txt`: A file to specify dependencies.\n  - `.gitattributes`: Specifies how files are treated in the repository. You can ignore it.\n\n4. Apply your token\n```bash\ngit remote set-url origin https://<yourUserName>:<yourToken>@huggingface.co/spaces/<yourUserName>/<yourSpaceName>\n```\n\n5. Test it out by pushing a change:\n- Edit `app.py`\n```python\nimport gradio as gr\n\ndef predict(input):\n    return f\"predict successfully ran with {input}\"\n\ndemo = gr.Interface(fn=predict, inputs='text', outputs='label')\ndemo.launch()\n```\n- Run the following commands in your terminal:\n  ```bash\n  git add .\n  git commit -m \"Simple read and write ability\"\n  git push\n  ```\n- Go back to your Hugging Face Space. Click **Files** and choose `app.py`. You should see your changes.\n\n6. Test it out at `https://huggingface.co/spaces/<yourUsername>/<yourSpaceName>`. You should see a Gradio interface with a \"Submit\" button.\nIMAGE HERE, RAP\n\nNotice at the bottom, you'll see a \"Use via API\" button. It has code to consume the API. I'll give you that code in a minute.\n\n\n## Step 3: Get the web API working via HTTP\n1. In your regular React website, install the Gradio client:\n```bash\nnpm install @gradio/client\n```\n1. Edit your React component that has a textbox, button, and output label:\nRAP: SHOULDN'T WE BE READING AN INPUT FROM THE USER? MAYBE A TEXT BOX WITH A SUBMIT BUTTON?\n```javascript\nimport { Client } from \"@gradio/client\";\n\nconst response_0 = await fetch(\"https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png\");\nconst exampleImage = await response_0.blob();\n\t\t\t\t\t\t\nconst client = await Client.connect(\"YourUsername/YourSpaceName\");\nconst result = await client.predict(\"/predict\"));\n\nconsole.log(result.data);\n```\n1. Run your React app and test it out. You should see the result on the page.\n\n1. Bonus! Best practice says to pull this into a function in a separate file but hey, you do you.\n\n## Step 4: Add Your Model and API Code\nThis is the hard part. The code you write will depend on the model you choose but good news; the model creator will usually provide a sample code snippet.\n\nFor this example, I'm using [SamLowe/roberta-base-go_emotions](https://huggingface.co/SamLowe/roberta-base-go_emotions).\n\n1. Edit your `app.py` file. Clear out the existing code and replace it with code to load and run the model:\n  ```python\n  from transformers import pipeline\n\nclassifier = pipeline(task=\"text-classification\", model=\"SamLowe/roberta-base-go_emotions\", top_k=None)\n\nsentences = [\"I am not having a great day\"]\n\nmodel_outputs = classifier(sentences)\nprint(model_outputs[0])\n# produces a list of dicts for each of the labels\n\n# [{'label': 'sadness', 'score': 0.9998}]\n  ```\n  \n  ```python\n  from fastapi import FastAPI, Request\n  from pydantic import BaseModel\n  import torch\n  from transformers import AutoModelForSequenceClassification, AutoTokenizer\n\n  app = FastAPI()\n\n  # Load model and tokenizer\n  model_name = \"distilbert-base-uncased-finetuned-sst-2-english\"\n  model_name = \"SamLowe/roberta-base-go_emotions\"\n  model = AutoModelForSequenceClassification.from_pretrained(model_name)\n  tokenizer = AutoTokenizer.from_pretrained(model_name)\n\n  class InputData(BaseModel):\n     text: str\n\n  @app.post(\"/predict\")\n  async def predict(data: InputData):\n     inputs = tokenizer(data.text, return_tensors=\"pt\")\n     outputs = model(**inputs)\n     prediction = torch.argmax(outputs.logits, dim=1).item()\n     return {\"label\": prediction}\n  ```\n3. Add any dependencies to the `requirements.txt` file:\n  ```\n  fastapi\n  uvicorn\n  torch\n  transformers\n  ```\n4. git add, commit and push your changes:\n  ```bash\n  git add .\n  git commit -m \"Added model and API code\"\n  git push\n  ```\n5. Test it out at `https://huggingface.co/spaces/<yourUsername>/<yourSpaceName>`. You should see a Gradio interface with a \"Submit\" button.\nIMAGE HERE, RAP\n6. Test Your API. Use a tool like `curl` or Postman to test your API. For example:\n```bash\ncurl -X POST https://huggingface.co/spaces/<yourUsername>/<yourSpaceName>/predict \\\n-H \"Content-Type: application/json\" \\\n-d 'I love this!'\n```\nIMAGE HERE, RAP\n6. And finally, test it out in your React app. You should see the result on the page.\nIMAGE HERE, RAP\n\n\n## Conclusion\n\nCongratulations! You've successfully deployed a machine learning model on Hugging Face Spaces and exposed it via an HTTP API. This setup is ideal for sharing your models with others while maintaining control over access.\n\nFor more advanced use cases, explore the Hugging Face documentation and experiment with additional features like custom domains and private Spaces.\n\n\n## Prerequisites\n\nThis quick-and-dirty tutorial assumes you have ...\n\n- An existing React web app to integrate with.\n- A Hugging Face account. Sign up at [Hugging Face](https://huggingface.co/).\n- A trained machine learning model selected. Find one [here](https://huggingface.co/models). In this tutorial, we used [SamLowe/roberta-base-go_emotions](https://huggingface.co/SamLowe/roberta-base-go_emotions).\n- git installed on your local machine.\n- Basic knowledge of JavaScript, Python and HTTP APIs.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":2,"slug":"step-1-create-a-new-space","text":"Step 1: Create a New Space"},{"depth":2,"slug":"step-2-sync-your-files-with-your-local-machine-using-git","text":"Step 2: Sync your files with your local machine using git"},{"depth":2,"slug":"step-3-get-the-web-api-working-via-http","text":"Step 3: Get the web API working via HTTP"},{"depth":2,"slug":"step-4-add-your-model-and-api-code","text":"Step 4: Add Your Model and API Code"},{"depth":2,"slug":"conclusion","text":"Conclusion"},{"depth":2,"slug":"prerequisites","text":"Prerequisites"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogPost, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
